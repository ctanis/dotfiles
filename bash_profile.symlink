#  -*- Mode: Shell-script; -*- 


if [ -z $INSIDE_EMACS ]; then
    # not in emacs
    export EDITOR=vi
    #export PAGER=most
    export PAGER=less
else
    # in emacs
    export EDITOR=emacsclient
    export PAGER=cat
fi

export GNUTERM=X11
export TEXINPUTS="~/.tex:.:$TEXINPUTS"
#export LESS="-erX"
export LESS="FRX"


export ORIG_PATH=$PATH
export PATH=~/bin:~/.dotfiles/bin:/usr/bin:/usr/local/bin:/bin


if [ $WINDOW ]; then
    export SCREEN_WINDOW="(screen $WINDOW) "
fi


function parse_git_branch {
    git rev-parse --abbrev-ref HEAD 2>/dev/null | sed -e 's/\(.*\)/\<\1\>/'
}

if [ $TERM != 'dumb' ]; then
    _inline='\[\e[00;31m\]${PROMPT_NOTE}\[\e[00;33m\]\W%\[\e[00;00m\] '
    _title='\[\e[0m\]\[\e]0;${TITLE_NOTE}${SCREEN_WINDOW}\h:\w `parse_git_branch`\a\]'
    export PS1="$_title$_inline"

    unset _inline
    unset _title
else
    #mostly for emacs shell...
    export PS1='${PROMPT_NOTE}\W% '
fi

# export PERL5LIB=~/.perl/local

shopt -s checkwinsize

       
## configure bash history stuff
shopt -s histappend
shopt -s cmdhist
shopt -s histverify
shopt -s histreedit


export HISTIGNORE="&:*HISTFILE*"
export HISTFILESIZE=2000
export HISTSIZE=2000
export PROMPT_COMMAND="history -a"
export HISTCONTROL=erasedups

# no colors in my ls
export LS_OPTIONS='-p'
alias ls='ls $LS_OPTIONS'


# Default to screen reconnect if possible
alias screen='screen -R'

# extended glob features and programmable tab completion
shopt -s extglob progcomp

## directory commands only complete with directories
complete -d pushd cd


PLATFORM=`uname`
if [ $PLATFORM == 'Darwin' ]; then
## mac version
    function edit()
    {
        osascript -e 'tell application "Emacs" to activate'

        until emacsclient -n $*  >/dev/null 2>&1; do
	    sleep 1;
        done;
    }

else
    function edit()
    {
        until emacsclient -n $*  >/dev/null 2>&1; do
	    sleep 1;
        done;
    }

fi; 


function expand_alias()
{
    local C=$1
    shift
    local TXT=`alias|perl -ne "if (/alias $C/) {s/\"/_._._/g; s/alias [^=]+='(.*)'/\\\$1/; print}"`;
    eval echo $TXT|perl -pe 's/_._._/"/g';
}



function update_repos ()
{
    for i in `cat ~/.active_repos`; do
	d=`eval echo $i;`
	if [ -d $d ]; then 
	    echo $d;
	    sh -c "cd $d && git fetch";
	else
	    echo "** $d not found **";
	fi;

    done;

    pushd ~/.dotfiles && git pull
    popd
    ## too many bad compilations
    ## `emacs -batch --eval '(byte-recompile-directory "~/.dotfiles/dotemacs")'`
}



function check_repos ()
{
    for i in `cat ~/.active_repos`; do
	d=`eval echo $i;`
	if [ -d $d ]; then 
	    echo $d;
	    sh -c "cd $d && git status";
	else
	    echo "** $d not found **";
	fi;
    done;

    ## `emacs -batch --eval '(byte-recompile-directory "~/.dotfiles/elisp")'`
}



# if [ -f ~/.bashrc ]; then
#    source ~/.bashrc
# fi


# if we are in iTerm OR it's a terminal over ssh
# this is necessary because TERM_PROGRAM isn't set on ssh connections and it's not
# save to call it2check locally since iTerm could be called via applescript
if [ "${TERM_PROGRAM}" == 'iTerm.app' ] || ([[ "$TERM" == xterm* ]] && [ -n "${SSH_CONNECTION}" ] && [ -f ${HOME}/.iterm2/it2check ]); then
    source "${HOME}/.iterm2_shell_integration.bash"
    export PROMPT_COMMAND="__bp_precmd_invoke_cmd; __bp_interactive_mode; ${HOME}/.iterm2/it2setkeylabel set status `hostname -s`; history -a"

    alias light='~/.iterm2/it2setcolor preset "Solarized Light"'
    alias dark='~/.iterm2/it2setcolor preset "Solarized Dark"'
    alias badge='iterm2_set_user_var badge $1'
fi


#brew install rename
function nospace { rename 's/[ \t]+/_/g' "$1"; }

function prompt_note() {
    export PROMPT_NOTE="$* "
}
function title_note() {
    export TITLE_NOTE="$* "
}

if [[ -z "$PROMPT_NOTE" ]]; then
    prompt_note `hostname -s`
fi


## download all links passed to stdin (useful in conjunction with bookmarklet
## that makes a list of link targets on the current page)
alias dl_stdin='for x in `xargs`; do wget  $x; done'


# reset history file if loaded in emacs/tramp (remote shell tweaks in my elisp
# handle loading the history properly)
if [ -n "$INSIDE_EMACS" ] && [[ "$HISTFILE" == *.tramp_history ]]; then
   export HISTFILE=~/.bash_history
fi   


## load customized bash-local if it exists for this machine; otherwise default
## to .bash-local
REAL_LOCAL_RC=~/.bash-local.`hostname`
if [ -e $REAL_LOCAL_RC ]; then
    source $REAL_LOCAL_RC
elif [ -f ~/.bash-local ]; then
    source ~/.bash-local
fi

